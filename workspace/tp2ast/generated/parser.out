Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> expression
Rule 5     expression -> expression ADD_OP expression
Rule 6     expression -> expression MUL_OP expression
Rule 7     expression -> NUMBER
Rule 8     expression -> IDENTIFIER
Rule 9     expression -> ( expression )
Rule 10    expression -> ADD_OP expression
Rule 11    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 9
)                    : 9
;                    : 2
=                    : 11
ADD_OP               : 5 10
IDENTIFIER           : 8 11
MUL_OP               : 6
NUMBER               : 7
error                : 

Nonterminals, with rules where they appear

assignation          : 3
expression           : 4 5 5 6 6 9 10 11
programme            : 2 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . expression
    (11) assignation -> . IDENTIFIER = expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 5
    NUMBER          shift and go to state 7
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    expression                     shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 9


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> expression .
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    ;               reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 5

    (11) assignation -> IDENTIFIER . = expression
    (8) expression -> IDENTIFIER .

    =               shift and go to state 12
    ADD_OP          reduce using rule 8 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 8 (expression -> IDENTIFIER .)
    ;               reduce using rule 8 (expression -> IDENTIFIER .)
    $end            reduce using rule 8 (expression -> IDENTIFIER .)


state 6

    (10) expression -> ADD_OP . expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    expression                     shift and go to state 13

state 7

    (7) expression -> NUMBER .

    ADD_OP          reduce using rule 7 (expression -> NUMBER .)
    MUL_OP          reduce using rule 7 (expression -> NUMBER .)
    ;               reduce using rule 7 (expression -> NUMBER .)
    $end            reduce using rule 7 (expression -> NUMBER .)
    )               reduce using rule 7 (expression -> NUMBER .)


state 8

    (9) expression -> ( . expression )
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    expression                     shift and go to state 15

state 9

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . expression
    (11) assignation -> . IDENTIFIER = expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 5
    NUMBER          shift and go to state 7
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    statement                      shift and go to state 2
    programme                      shift and go to state 16
    assignation                    shift and go to state 3
    expression                     shift and go to state 4

state 10

    (5) expression -> expression ADD_OP . expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    expression                     shift and go to state 17

state 11

    (6) expression -> expression MUL_OP . expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    expression                     shift and go to state 18

state 12

    (11) assignation -> IDENTIFIER = . expression
    (5) expression -> . expression ADD_OP expression
    (6) expression -> . expression MUL_OP expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (9) expression -> . ( expression )
    (10) expression -> . ADD_OP expression

    NUMBER          shift and go to state 7
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 8
    ADD_OP          shift and go to state 6

    expression                     shift and go to state 19

state 13

    (10) expression -> ADD_OP expression .
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 10 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 10 (expression -> ADD_OP expression .)
    ;               reduce using rule 10 (expression -> ADD_OP expression .)
    $end            reduce using rule 10 (expression -> ADD_OP expression .)
    )               reduce using rule 10 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 10 ]
  ! MUL_OP          [ shift and go to state 11 ]


state 14

    (8) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 8 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 8 (expression -> IDENTIFIER .)
    ;               reduce using rule 8 (expression -> IDENTIFIER .)
    $end            reduce using rule 8 (expression -> IDENTIFIER .)
    )               reduce using rule 8 (expression -> IDENTIFIER .)


state 15

    (9) expression -> ( expression . )
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    )               shift and go to state 20
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 16

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)


state 17

    (5) expression -> expression ADD_OP expression .
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 5 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 5 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 5 (expression -> expression ADD_OP expression .)
    )               reduce using rule 5 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 11

  ! MUL_OP          [ reduce using rule 5 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 10 ]


state 18

    (6) expression -> expression MUL_OP expression .
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 6 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 6 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 6 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 6 (expression -> expression MUL_OP expression .)
    )               reduce using rule 6 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 10 ]
  ! MUL_OP          [ shift and go to state 11 ]


state 19

    (11) assignation -> IDENTIFIER = expression .
    (5) expression -> expression . ADD_OP expression
    (6) expression -> expression . MUL_OP expression

    ;               reduce using rule 11 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 11 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 20

    (9) expression -> ( expression ) .

    ADD_OP          reduce using rule 9 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 9 (expression -> ( expression ) .)
    ;               reduce using rule 9 (expression -> ( expression ) .)
    $end            reduce using rule 9 (expression -> ( expression ) .)
    )               reduce using rule 9 (expression -> ( expression ) .)

